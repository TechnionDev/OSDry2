#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\begin_preamble
\usepackage{xcolor}
\pagecolor[rgb]{0.15,0.15,0.15} %black
\color[rgb]{1,1,1} %grey

\newfontfamily\mylistingsfont{PT Mono}
\definecolor{lbcolor}{rgb}{0.2,0.2,0.2}  
\end_preamble
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\size giant
OS Dry 2
\end_layout

\begin_layout Standard
\align center

\size large
22/05/2021
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row topspace="2cm">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size huge
Dani Bondar - 206560856
\end_layout

\end_inset
</cell>
</row>
<row topspace="1cm">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size huge
Gur Telem - 206631848
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
By itself, the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

yes
\end_layout

\end_inset

 command outputs 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

'y'
\end_layout

\end_inset

 or whatever is specified as an argument, followed by a newline repeatedly
 until stopped by the user or otherwise killed; when piped into a command,
 it will continue until the pipe breaks (i.e., the program completes its execution
).
\end_layout

\begin_deeper
\begin_layout Standard
If 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

yes
\end_layout

\end_inset

 get an argument, then it is the argument that will be repeated rather than
 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

'y'
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Kinda like an 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

echo
\end_layout

\end_inset

 if it was stuck in an infinite loop.
\end_layout

\end_deeper
\begin_layout Enumerate
We use the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

yes
\end_layout

\end_inset

 with 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

''
\end_layout

\end_inset

 to send newlines to the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

make oldconfig
\end_layout

\end_inset

 command.
 This will discard the need for a user interaction with the process, choosing
 the default choices.
 In most scripts, merely entering a newline chooses the option capitalized.
 e.g.
 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

are you should (Y/n): 
\end_layout

\end_inset

 simply hitting enter will choose 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

y
\end_layout

\end_inset

.
 While running the command 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

make oldconfig
\end_layout

\end_inset

 without the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

yes
\end_layout

\end_inset

 it did the same this as if we used 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

yes
\end_layout

\end_inset

.
 I assume the script has changed or some caching has taken place and it
 should have prompted the user for input.
\end_layout

\begin_layout Enumerate
the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

GRUB_TIMEOUT
\end_layout

\end_inset

 parameter indicates the amount of time in seconds the grub process waits
 for the user before automagically choosing the default boot option.
\end_layout

\begin_deeper
\begin_layout Standard
The pros of increasing the timeout are that now the user has more time to
 choose to pick a different boot option or to modify parameters in the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

grub
\end_layout

\end_inset

, e.g.
 which version of the kernel to boot with.
\end_layout

\begin_layout Standard
The cons are that most of the time the user wants the default options (if
 not, then the user should change the default to something else).
 Thus, the boot time will either increase or the user will need to manually
 interact with the grub to boot faster.
 I usually prefer a timeout of 
\begin_inset Formula $1$
\end_inset

 or 
\begin_inset Formula $2$
\end_inset

 seconds for a normal installation and around 
\begin_inset Formula $5$
\end_inset

 seconds for a virtual machine (for a virtual machine, you need to capture
 the keyboard before being able to interact with the vm so I need more time.
 Also, it's more rare to reboot a vm unless you actually play with the kernel
 because you usually suspend when you're done with it).
\end_layout

\end_deeper
\begin_layout Enumerate
TL;LD: User space and kernel space has a different set of functions.
 Neither space can use a function from the 
\begin_inset Quotes eld
\end_inset

other side
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Standard
The 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

execve()
\end_layout

\end_inset

 is part of the standard c library and its purpose is to envelop the calling
 of the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

syscall
\end_layout

\end_inset

 command - which transitions to the kernel space and execute the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

do_execve()
\end_layout

\end_inset

 function which then dose the actual switch of the programs.
 the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

run_init_process()
\end_layout

\end_inset

 function is located in the kernel space and isn't aware to the C standard
 library (and also doesn't need to).
 
\end_layout

\end_deeper
\begin_layout Enumerate
The 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

syscall()
\end_layout

\end_inset

 function envelops the calling of the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

syscall
\end_layout

\end_inset

 assembly instruction.
 It receives at list one argument (the number of the system call) and any
 number of optional arguments, depending on the system call - for example,
 the added parameters of the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

sys_write
\end_layout

\end_inset

 system call are the address and length of the string.
 It is most commonly used to invoke syscalls that don't have a pretty wrapper.
\end_layout

\begin_deeper
\begin_layout Standard
The 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

syscall()
\end_layout

\end_inset

 function moves the system call's number (first parameter) to the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

RAX
\end_layout

\end_inset

 register and if any other parameter were added it passes them via predefined
 registers.
 It calls the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

syscall
\end_layout

\end_inset

 assembly command and then waits to the outcome of the system call.
 On return, the function sets back the registers and saves the result in
 register 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

RAX
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The implementation of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

syscall()
\end_layout

\end_inset

 is in the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

glibc
\end_layout

\end_inset

 library.
 It is a userspace function after all.
 Its prototype is included with 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

unistd.h
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Enumerate
It calls for the system call 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

getpid()
\end_layout

\end_inset

 which corresponds to the number 39.
 A more readable code may look like this:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int main(){
\end_layout

\begin_layout Plain Layout

	printf(
\begin_inset Quotes eld
\end_inset

sys_hello returnd %ld
\backslash
n
\begin_inset Quotes erd
\end_inset

, getpid());
\end_layout

\begin_layout Plain Layout

	return 0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Since the answer needs more content and I think this is explanation enough,
 not sure what else I need to add that isn't here.
 Maybe I can mention that the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

getpid
\end_layout

\end_inset

 is assigned to syscall 
\begin_inset Formula $39$
\end_inset

 on line 
\begin_inset Formula $48$
\end_inset

.
 I really don't no what else should be added here.
 Maybe some Lorem Ipsum as a space filler: Lorem ipsum dolor sit amet, consectet
ur adipiscing elit.
 Nunc ac scelerisque nunc.
 Interdum et malesuada fames ac ante ipsum primis in faucibus.
 Donec rutrum aliquet mauris vel congue.
 Etiam quis tortor nulla.
 Suspendisse egestas hendrerit ipsum ac blandit.
\end_layout

\end_deeper
\begin_layout Enumerate
There is no file called 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

test.c
\end_layout

\end_inset

.
 The file provided was 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

test.cxx
\end_layout

\end_inset

.
 And the file tests whether the first two new syscalls, 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

get_weight
\end_layout

\end_inset

 and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

set_weight
\end_layout

\end_inset

 work as expected for valid input as well as the default value for a process's
 weight.
 As part of the test, it uses the wrappers provided to us.
 The test first checks the default weight value, then sets the weight to
 
\begin_inset Formula $5$
\end_inset

 and test the change took.
 It also tests the return value of the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

set_weight
\end_layout

\end_inset

 function to be 
\begin_inset Formula $0$
\end_inset

 for the valid parameter 
\begin_inset Formula $5$
\end_inset

.
\end_layout

\begin_layout Part
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Answers 
\begin_inset Formula $1$
\end_inset

 and 
\begin_inset Formula $5$
\end_inset

 are correct.
 E
\end_layout

\begin_deeper
\begin_layout Enumerate
Every scheduling method that doesn't uses preemption can suffer from the
 conveyer-belt effect - the reason is that if a long task is first one to
 enter the system, then it blocks all of the other processes that can come
 after it; i.e.
 there is a conveyer belt effect.
\end_layout

\begin_deeper
\begin_layout Standard
Because the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

FCFS
\end_layout

\end_inset

 algorithm is a non-preemption algorithm then is also suffers from the conveyer-
belt effect
\end_layout

\begin_layout Standard
For sane values of 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

RR
\end_layout

\end_inset

, there's no convoy effect.
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset space ~
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
All tasks arrive at the same time
\end_layout

\begin_layout Enumerate
Their runtime is known from the beginning
\end_layout

\begin_layout Enumerate
A single-core system while all the jobs are serial (meaning they run from
 beginning to the end without using IO or pausing).
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
We'll prove that 
\begin_inset Formula $Q_{i}=\left(\frac{W_{i}}{\sum_{j}W_{j}}\right)\cdot t$
\end_inset

 with 
\begin_inset Formula $t=sched\_latency$
\end_inset

.
\end_layout

\begin_deeper
\begin_layout Proof
It is given that 
\begin_inset Formula $\sum_{i}Q_{i}=t$
\end_inset

 (meaning the total of the quantums is exactly the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

sched_latency
\end_layout

\end_inset

 and is constant).
\end_layout

\begin_layout Proof
Since a process runs once per epoch and they have the same vtime after each
 epoch, then the 
\begin_inset Formula $\frac{c}{W_{i}}\cdot Q_{i}$
\end_inset

 is constant (i.e.
 the virtual time we add per epoch is the same).
\end_layout

\begin_layout Proof
So we can mark 
\begin_inset Formula $\forall i:\frac{c}{W_{i}}\cdot Q_{i}=v$
\end_inset

.
 So we get 
\begin_inset Formula $Q_{i}=\frac{W_{i}}{c}v$
\end_inset

.
 And from that we conclude 
\begin_inset Formula 
\[
\sum_{i}Q_{i}=\sum_{i}\frac{W_{i}}{c}v=\frac{v}{c}\sum_{i}W_{i}=t\Longrightarrow v=\frac{t\cdot c}{\sum_{i}W_{i}}
\]

\end_inset

And not, we can substitute 
\begin_inset Formula $v$
\end_inset


\begin_inset Formula 
\[
Q_{i}=\frac{W_{i}}{\cancel{c}}\cdot\frac{t\cdot\cancel{c}}{\sum_{i}W_{i}}=
\]

\end_inset


\begin_inset Formula 
\[
Q_{i}=\frac{W_{i}}{\sum_{i}W_{i}}\cdot t
\]

\end_inset

Q.E.D
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

CFS
\end_layout

\end_inset

 improvements
\end_layout

\begin_deeper
\begin_layout Enumerate
\noindent
\align left
Like discussed in the tutorial, lets say that we have two tasks (A and B).
 Task B uses some lengthy IO operation (10 sec).
 according to Hila's suggestion, task B will rejoin the tree with the same
 virtual-time.
 This means that now task B will run 10 sec, while task A will 
\begin_inset Quotes eld
\end_inset

starve
\begin_inset Quotes erd
\end_inset

.
 So Hila's suggestion will promote long IO operation.
\end_layout

\begin_layout Enumerate
\noindent
\align left
Using a list DS will increase the time complexity from 
\begin_inset Formula $O\left(\log n\right)$
\end_inset

 to 
\begin_inset Formula $O\left(n\right)$
\end_inset

.
 Getting the task with the minimal VT will take 
\begin_inset Formula $O\left(1\right)$
\end_inset

, but after every insertion to the DS we will need to go through all of
 the tasks in the list to find where to insert the task with the updated
 value.
\end_layout

\begin_layout Enumerate
\noindent
\align left
In case of large number of tasks in the system, with lets say same priority,
 the quantum for each task will be relatively small.
 this will result in increased number of context switches - which means
 the percentage of time been spent on context switch will increase substantially
 and perhaps will overshadow the time been spent on actual calculations.
 Or in other words, a potential big increase in the overhead.
\end_layout

\begin_layout Enumerate
\noindent
\align left
Will result in increase epoch time and a potential starvation of tasks with
 low priority.
 Will also cause the processes to feel less responsive due to the longer
 epoch time.
\end_layout

\begin_layout Enumerate
\noindent
\align left
Will cause the difference between priorities to be less edivent on top of
 non linear.
\end_layout

\begin_layout Enumerate
\noindent
\align left
Potential stravation of old/existing tasks due to new tasks 
\begin_inset Quotes eld
\end_inset

cutting in line
\begin_inset Quotes erd
\end_inset

 (this method is aka an 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

Israeli Queue
\end_layout

\end_inset

).
\end_layout

\end_deeper
\begin_layout Enumerate
The user can use large number of threads in his/hers program.
 Because all of the threads use the same memory space they will receive
 a high weight score via the new scoring method, which result in prioritization
 of this program over the other tasks.
 So instead of changing the weight of the task via a singular way (the value
 of the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

NICE
\end_layout

\end_inset

 parameter), the user is now able to bypass the kernel and change the effective
 program's priority by simply splitting the program into multiple threads.
\end_layout

\begin_deeper
\begin_layout Standard
In addition, assuming a user program has two threads, the core would be
 dedicated to that user program until one all the threads but one finish.
 This is because after a task (i.e.
 a thread) finishes, we will run the other threads (even if they already
 ran during this epoch.
 Assuming they're in a ready state and alive).
 This effectively locks a core to a single user program if it has two or
 more threads.
 Thus, starving ALL other tasks running on the same core (i.e.
 CPU).
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset space ~
\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename weights_nice_graph.png
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset Formula $f\left(nice\right)=\log_{1.23}weight\left(nice\right)$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
The connection between the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

nice
\end_layout

\end_inset

 value and the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

weight
\end_layout

\end_inset

 value is 
\begin_inset Formula 
\[
\log_{1.23}\left(weight\right)=-1.078\cdot NICE+33.486
\]

\end_inset

Meaning, the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

weight
\end_layout

\end_inset

 decreases exponentially with the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

nice
\end_layout

\end_inset

 value.
\end_layout

\end_deeper
\end_body
\end_document
